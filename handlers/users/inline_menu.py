from loader import dp, bot
# from aiogram.utils.markdown import hlink
from data.config import admin_chat
from keyboards.inline import inline_kb_menu
from keyboards.default import keyboard_menu
from aiogram import types, F
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters.state import StateFilter
from aiogram.filters.command import CommandStart
from utils.db_api.db_asyncpg import *
from states.state import SetCount, SetCountInBasket, Search, ConfirmOrder, AddReview, CountCodes, Transaction, TransactionAccept
from aiogram.fsm.context import FSMContext
from handlers.users.admin import try_edit_call, try_delete_call, try_delete_msg, delete_messages, tovar_info_text
import os
import pandas as pd
# from handlers.users.commands import start_menu

async def digit_check(digit):
    digit = digit.replace(',', '.')
    try:
        digit = float(digit)
        if digit >= 0:
            return True
        else:
            return False
    except ValueError:
        return False

@dp.callback_query(F.data=='basket')
async def basket_menu(call: types.CallbackQuery):
    # await try_edit_call(call)
    await send_basket(chat_id=call.message.chat.id, user_id=call.from_user.id)
    await try_delete_call(call)
    await call.answer()

@dp.callback_query(F.data=='clearBasket')
async def clearBasket(call: types.CallbackQuery):
    await clear_cart(user_id=call.from_user.id)
    # await send_basket(chat_id=call.message.chat.id, user_id=call.from_user.id)
    await try_edit_call(call, '–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!', None)
    # await call.message.answer()
    await call.answer()

@dp.callback_query(F.data.contains('basketAdd_'))
async def basketAdd_(call: types.CallbackQuery):
    print(call.data)
    ids = await get_promos(int(call.data.split('_')[1]), int(call.data.split('_')[2]))
    for id in ids:
        await tovar_add_to_basket(user_id=int(call.from_user.id), product_id=id,
                                count=1)
    await try_edit_call(call, f'–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É üòâ', await inline_kb_menu.continue_shopping())

    # await call.message.answer(text=,
    #                           reply_markup=)
    call.answer()

async def send_basket(chat_id, user_id):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä–∑–∏–Ω—ã
    basket = await basket_list(user_id)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–∞–ø–∏—Å–∏ –≤ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π
    basket = [(record["product_id"], record["price"], record["amount"], record["count"]) for record in basket]
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ amount
    grouped_basket = {}
    
    for tovar in basket:
        product_id, price, amount, count = tovar
        if amount not in grouped_basket:
            grouped_basket[amount] = {'total_price': price, 'total_count': 0}
        grouped_basket[amount]['total_count'] += count
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–∏ –∏ –ø–æ–¥—Å—á–µ—Ç –æ–±—â–µ–π —Å—É–º–º—ã
    string = '<b>–ö–æ—Ä–∑–∏–Ω–∞.</b>'
    summ = 0
    count = 1
    
    for amount, values in grouped_basket.items():
        total_price = values['total_price']
        total_count = values['total_count']
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –¥–ª—è —ç—Ç–æ–≥–æ amount
        price_sum = total_price * total_count
        summ += price_sum
        
        string += f'\n\n{count}. ¬´<code>{amount} uc</code>¬ª ' \
                  f'\n\t\t\t–¶–µ–Ω–∞: {total_price:.2f} √ó {total_count} = {price_sum:.2f} $'
        count += 1
    
    string += '\n__________________' + '_' * len(str(summ))
    string += f'\n–ò—Ç–æ–≥–æ: {summ:.2f} $'

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    markup = await inline_kb_menu.basket_markup(basket=basket)
    await bot.send_message(chat_id=chat_id, text=string, reply_markup=markup, parse_mode="HTML")


@dp.callback_query(F.data == 'categories')
async def categories_menu(call: types.CallbackQuery):
    # try_delete_msg(call.message)
    markup = await inline_kb_menu.tovar_list_markup()
    text = '–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º –ø–∞–∫.'

    await try_edit_call(callback=call, text=text, markup=markup)


# @dp.callback_query(F.data.contains('tovar-counter_'))
# async def tovar_counter(call: types.CallbackQuery):
#     print(call.data)
#     _, amount, data, action = call.data.split('_')
#     amount = int(amount)
#     data = int(data)
#     count = await get_count(amount=amount)
#     new_count = 0
#     # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ/—É–º–µ–Ω—å—à–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞
#     if 'plus' in call.data:
#         new_count = data + 1
#     else:
#         new_count = data-1
#     # new_count = data + 1 if 'plus' in call.data else data - 1
#     new_count = max(new_count, 1)  # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
#     if new_count == data:
#         await call.answer()
#     if count < new_count:
#         # print('asdads')
#         await call.message.answer('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ!')
#         await call.answer()
#     else:
#         print(new_count)
#         # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º —Å—á–µ—Ç—á–∏–∫–∞
#         new_markup = await inline_kb_menu.tovar_info_markup()
        
#         # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–æ–≤–æ–π —Ä–∞–∑–º–µ—Ç–∫–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
#         await call.message.edit_reply_markup(reply_markup=new_markup)
#         await call.answer()


@dp.callback_query(F.data.contains('tovar-info_'))
async def tovar_info_menu(call: types.CallbackQuery, state: FSMContext):
    amount = int(call.data.split('_')[1])
    count = await get_count(amount)
    print(type(count))
    price = await get_price(amount)
    if count:
        msg_text = await tovar_info_text(amount=amount, price=price, count=count)
        markup = await inline_kb_menu.tovar_info_markup()

        
        await state.update_data({"amount": amount, "price": price})
        try:
            await try_edit_call(call, msg_text, markup)
            # await call.message.answer(text=msg_text, reply_markup=markup, parse_mode='HTML')

        except Exception as e:
            print(f"Exception occurred: {e}")
            await try_edit_call(callback=call, text=msg_text, markup=markup)
    else:
        await call.answer('–¢–æ–≤–∞—Ä –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω!')

@dp.callback_query(F.data == 'addingToBasket')
async def handle_adding(call: types.CallbackQuery, state:FSMContext):
    await state.set_state(CountCodes.count)
    await try_edit_call(call, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–¥–æ–≤:", None)
    # await call.message.answer()
    await call.answer()

@dp.message(CountCodes.count)
async def handle_count(message: types.Message, state: FSMContext):
    await state.update_data({"count": message.text})
    data = await state.get_data()
    count = await get_count(int(data["amount"]))
    
    if int(data["count"]) > count:
        await message.answer("–í–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ!")
        # call = types.CallbackQuery(data=f'tovar-info_{data["amount"]}', message=message)
        msg_txt = await tovar_info_text(amount=data['amount'], count=data['count'], price=data['price'])
        await message.answer(msg_txt, reply_markup=await inline_kb_menu.tovar_info_markup(), parse_mode='HTML')
        state.clear()
    else:
        # Create a mock callback query object
        
        # call = types.CallbackQuery(data=f'tovar-info_{data["amount"]}', message=message)
        await message.answer(f"–í—ã–±—Ä–∞–Ω–æ {data['count']} –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ \n–Ω–∞ {data['amount']}uc", reply_markup=await inline_kb_menu.confirm_basket(data['count'], data["amount"]))
        await state.clear()



@dp.callback_query(F.data == 'pay')
async def process_payment(call: types.CallbackQuery, state: FSMContext):
    # –ó–∞–º–µ–Ω–∏—Ç–µ 'your_crypto_wallet_id' –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID –∫—Ä–∏–ø—Ç–æ-–∫–æ—à–µ–ª—å–∫–∞
    crypto_wallet_id = 'your_crypto_wallet_id'

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –æ—Ç–º–µ–Ω—ã
    markup = InlineKeyboardMarkup(inline_keyboard=
        [[InlineKeyboardButton(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥', callback_data='confirm_payment')],
        [InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='cancel_payment')]
    ])

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await call.message.edit_text(
        text=f'–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫—Ä–∏–ø—Ç–æ-–∫–æ—à–µ–ª–µ–∫:\n<b>{crypto_wallet_id}</b>\n\n'
             '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.',
        reply_markup=markup,
        parse_mode='HTML'
    )

    # –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å
    await call.answer()

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
@dp.callback_query(F.data == 'confirm_payment')
async def confirm_payment(call: types.CallbackQuery, state: FSMContext):
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –∫—Ä–∏–ø—Ç–æ-–∫–æ—à–µ–ª—å–∫–∞ –∏–∑ callback_data
    _, crypto_wallet_id = call.data.split('_', 1)
    
    # –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    # await some_payment_confirmation_logic(crypto_wallet_id)

    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await state.set_state(Transaction.amount)
    await call.message.edit_text(
        text=f'–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ USDT:',
        parse_mode='HTML'
    )
    await call.answer()

@dp.message(Transaction.amount)
async def transaction_amount(message: types.Message, state: FSMContext):
    await state.update_data({ "amount": message.text})
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞:")
    await state.set_state(Transaction.operation_id)

@dp.message(Transaction.operation_id)
async def transaction_amount(message: types.Message, state: FSMContext):
    if message.photo:
        print(message.photo[0].file_id)
        await state.update_data({ "operation_id": message.photo[0].file_id })
        data = await state.get_data()
        await message.answer("–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞.")
        await state.clear()
        await add_transaction(message.from_user.id, data['amount'], data['operation_id'])
        awaited_transactions = await get_not_accepted_transactions()
        admins_id = await get_admins()
        for admin in admins_id:
            await bot.send_message(chat_id=admin['user_id'], text=f"–ù–æ–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ! –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ‚Äî <code><b>{len(awaited_transactions)}</b></code>",
                                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å", callback_data="show_next")]]), parse_mode='HTML')
        
        await state.set_state(TransactionAccept.accept)
        await state.update_data({ "user_id": message.from_user.id, "operation_id": data['operation_id'] })
    # await bot.send_message(chat_id=1054184718, text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –≤—ã–ø–æ–ª–Ω–∏–ª –ø–µ—Ä–µ–≤–æ–¥ \n<b>C—É–º–º–∞:</b> <code>{data["amount"]} </code>\n<b>Id —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</b> <code>{data['operation_id']}</code> \n<b>–í—Ä–µ–º—è:</b> <code>{datetime.datetime.now()}</code> \n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π —Å–∏–º–≤–æ–ª –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞"
    #                        , parse_mode='HTML')
# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø–µ—Ä–µ–≤–æ–¥–∞
@dp.callback_query(F.data == 'cancel_payment')
async def cancel_payment(call: types.CallbackQuery):
    # –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–º–µ–Ω—ã –ø–µ—Ä–µ–≤–æ–¥–∞
    # –ù–∞–ø—Ä–∏–º–µ—Ä, —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    # await some_payment_cancellation_logic()

    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await call.message.edit_text(
        text='–ü–µ—Ä–µ–≤–æ–¥ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.',
        parse_mode='HTML'
    )
    await call.answer()

@dp.callback_query(F.data.contains('confirm_order'))
async def handle_confirm_order(call: types.CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—Ä–∑–∏–Ω–µ
    cart_items = await get_cart_items(user_id)
    if not cart_items:
        await call.message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        return
    
    # –†–∞—Å—á–µ—Ç –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    total_price = sum(item['price'] * item['count'] for item in cart_items)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_balance = await get_user_balance(user_id)
    if user_balance < total_price:
        print(user_balance, total_price)
        await call.message.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç–µ.")
        return
    else:
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await update_user_balance(user_id, float(user_balance) - total_price)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
        promo_codes = await get_promo_codes(cart_items)
        await set_sold(cart_items=cart_items)
        
        if len(promo_codes) <= 10:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            promo_codes_text = "\n".join([f"{item['amount']}uc: <code>{code}</code>" for item in promo_codes for code in item['codes']])
            await bot.send_message(user_id, f"–í–∞—à–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã:\n{promo_codes_text}", parse_mode='HTML')
        else:
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –≤ Excel —Ñ–∞–π–ª
            df = pd.DataFrame([{"amount": item['amount'], "code": code} for item in promo_codes for code in item['codes']])
            file_path = f"/tmp/promo_codes_{user_id}.xlsx"
            df.to_excel(file_path, index=False)
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ Excel —Ñ–∞–π–ª–∞
            file = types.FSInputFile(file_path)
            await bot.send_document(user_id, file, caption="–í–∞—à–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã:")
            
            # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            os.remove(file_path)
        
        # –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
        await clear_cart(user_id)
        
        await call.message.answer("–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")
        await call.answer()